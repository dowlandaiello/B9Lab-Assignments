"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const path = require("path");
const constants_1 = require("./constants");
const logging_1 = require("./logging");
const execute_child_process_1 = require("./utils/execute-child-process");
const debug = require('debug')('windows-build-tools');
/**
 * Uses PowerShell to configure the environment for
 * msvs_version 2015 and npm python 2.7
 *
 * @params variables an object with paths for different environmental variables
 */
function setEnvironment(env) {
    const pythonPath = path.join(env.python.path);
    const pythonExePath = path.join(pythonPath, 'python.exe');
    const scriptPath = constants_1.isDryRun
        ? path.join(__dirname, '..', 'ps1', 'dry-run.ps1')
        : path.join(__dirname, '..', 'ps1', 'set-environment.ps1');
    const maybeAddPythonToPath = process.env.npm_config_add_python_to_path ? ' -AddPythonToPath' : '';
    const maybePython = env.python.toConfigure ? ' -ConfigurePython' : '';
    const maybeBuildTools = env.buildTools.toConfigure ? ' -ConfigureBuildTools' : '';
    const maybeArgs = `${maybeBuildTools}${maybePython}${maybeAddPythonToPath}`;
    const psArgs = `& {& '${scriptPath}' -pythonPath '${pythonPath}' -pythonExePath '${pythonExePath}'${maybeArgs} }`;
    const args = ['-ExecutionPolicy', 'Bypass', '-NoProfile', '-NoLogo', psArgs];
    return execute_child_process_1.executeChildProcess('powershell.exe', args)
        .then(() => logging_1.log(chalk_1.default.bold.green(`\nAll done!\n`)))
        .catch((error) => debug(`Encountered environment setting error: ${error}`));
}
exports.setEnvironment = setEnvironment;
//# sourceMappingURL=environment.js.map