"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const constants_1 = require("../constants");
const logging_1 = require("../logging");
const clean_1 = require("../utils/clean");
const get_build_tools_installer_path_1 = require("../utils/get-build-tools-installer-path");
const get_python_installer_path_1 = require("../utils/get-python-installer-path");
const get_work_dir_1 = require("../utils/get-work-dir");
const single_line_log_1 = require("../utils/single-line-log");
const launch_1 = require("./launch");
const tailer_1 = require("./tailer");
const singleLineLogger = single_line_log_1.createSingleLineLogger();
const vccInstaller = get_build_tools_installer_path_1.getBuildToolsInstallerPath();
const vcLogTitle = chalk_1.default.bold.green('---------- Visual Studio Build Tools ----------');
const pyLogTitle = chalk_1.default.bold.green('------------------- Python --------------------');
let vccLastLines = ['Still waiting for installer log file...'];
let pythonLastLines = ['Still waiting for installer log file...'];
let lastLinesInterval = null;
const debug = require('debug')('windows-build-tools');
/**
 * Installs the build tools, tailing the installation log file
 * to understand what's happening
 */
function install(cb) {
    logging_1.log(chalk_1.default.green('\nStarting installation...'));
    clean_1.cleanExistingLogFiles();
    launch_1.launchInstaller()
        .then(() => launchLog())
        .then(() => Promise.all([tailBuildInstallation(), tailPythonInstallation()]))
        .then((details) => {
        logStatus();
        stopLog();
        cb({
            buildTools: { toConfigure: true },
            python: details[1]
        });
    })
        .catch((error) => {
        logging_1.log(error);
    });
}
exports.install = install;
function logStatus() {
    const updatedLog = [vcLogTitle, ...vccLastLines, pyLogTitle, ...pythonLastLines];
    singleLineLogger.log(updatedLog.join('\n'));
}
function launchLog() {
    if (!logging_1.shouldLog)
        return;
    logging_1.log('Launched installers, now waiting for them to finish.');
    logging_1.log('This will likely take some time - please be patient!\n');
    logging_1.log('Status from the installers:');
    lastLinesInterval = setInterval(logStatus, 1000);
}
function stopLog() {
    if (!logging_1.shouldLog)
        return;
    clearInterval(lastLinesInterval);
    // Flush newlines
    logging_1.log('');
}
function tailBuildInstallation() {
    return new Promise((resolve, reject) => {
        const tailer = new tailer_1.Tailer(vccInstaller.logPath);
        tailer.on('lastLines', (lastLines) => {
            vccLastLines = lastLines;
        });
        tailer.on('exit', (result, details) => {
            debug('Install: Build tools tailer exited');
            if (result === 'error') {
                debug('Installer: Tailer found error with installer', details);
                reject(new Error(`Found error with VCC installer: ${details}`));
            }
            if (result === 'success') {
                vccLastLines = [chalk_1.default.bold.green('Successfully installed Visual Studio Build Tools.')];
                debug('Installer: Successfully installed Visual Studio Build Tools according to tailer');
                resolve();
            }
            if (result === 'failure') {
                logging_1.log(chalk_1.default.bold.red('Could not install Visual Studio Build Tools.'));
                logging_1.log('Please find more details in the log files, which can be found at');
                logging_1.log(get_work_dir_1.getWorkDirectory());
                debug('Installer: Failed to install according to tailer');
                resolve();
            }
        });
        tailer.start();
    });
}
function tailPythonInstallation() {
    return new Promise((resolve, reject) => {
        if (constants_1.isPythonInstalled) {
            debug('Installer: Python is already installed');
            pythonLastLines = [chalk_1.default.bold.green(`${constants_1.installedPythonVersion} is already installed, not installing again.`)];
            return resolve({ toConfigure: false, path: '' });
        }
        // The log file for msiexe is utf-16
        const tailer = new tailer_1.Tailer(get_python_installer_path_1.getPythonInstallerPath().logPath, 'ucs2');
        tailer.on('lastLines', (lastLines) => {
            pythonLastLines = lastLines;
        });
        tailer.on('exit', (result, details) => {
            debug('python tailer exited');
            if (result === 'error') {
                debug('Installer: Tailer found error with installer', details);
                reject(new Error(`Found error with Python installer: ${details}`));
            }
            if (result === 'success') {
                pythonLastLines = [chalk_1.default.bold.green('Successfully installed Python 2.7')];
                debug('Installer: Successfully installed Python 2.7 according to tailer');
                resolve({ path: details || get_python_installer_path_1.getPythonInstallerPath().targetPath, toConfigure: true });
            }
            if (result === 'failure') {
                logging_1.log(chalk_1.default.bold.red('Could not install Python 2.7.'));
                logging_1.log('Please find more details in the log files, which can be found at');
                logging_1.log(get_work_dir_1.getWorkDirectory());
                debug('Installer: Failed to install Python 2.7 according to tailer');
                resolve(undefined);
            }
        });
        tailer.start();
    });
}
//# sourceMappingURL=index.js.map